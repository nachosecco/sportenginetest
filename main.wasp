app SportEngine {
  wasp: {
    version: "^0.11.4"
  },
  title: "SportEngine",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
        id Int @id @default(autoincrement())
        username String @unique
        password String
        role String
        team Team
        messagesSent Message[] @relation("SentMessages")
        messagesReceived Message[] @relation("ReceivedMessages")
        tasks Task[]
        stats Stat[]
        matches Match[]
        notifications Notification[]
psl=}

entity Team {=psl
        id Int @id @default(autoincrement())
        name String
        users User[]
        matches Match[]
psl=}

entity Match {=psl
        id Int @id @default(autoincrement())
        date DateTime
        teams Team[]
        users User[]
        stats Stat[]
psl=}

entity Message {=psl
        id Int @id @default(autoincrement())
        text String
        senderId Int
        recipientId Int
        sender User @relation("SentMessages", fields: [senderId], references: [id])
        recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id])
psl=}

entity Task {=psl
        id Int @id @default(autoincrement())
        description String
        user User
psl=}

entity Stat {=psl
        id Int @id @default(autoincrement())
        value Int
        type String
        user User
        match Match
psl=}

entity Notification {=psl
        id Int @id @default(autoincrement())
        title String
        message String
        user User
psl=}

action createUser {
  fn: import { createUser } from "@server/actions.js",
  entities: [User]
}

action createMatch {
  fn: import { createMatch } from "@server/actions.js",
  entities: [Match]
}

action createMessage {
  fn: import { createMessage } from "@server/actions.js",
  entities: [Message]
}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

action createStat {
  fn: import { createStat } from "@server/actions.js",
  entities: [Stat]
}

action createNotification {
  fn: import { createNotification } from "@server/actions.js",
  entities: [Notification]
}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

query getMatch {
  fn: import { getMatch } from "@server/queries.js",
  entities: [Match]
}

query getMessage {
  fn: import { getMessage } from "@server/queries.js",
  entities: [Message]
}

query getTask {
  fn: import { getTask } from "@server/queries.js",
  entities: [Task]
}

query getStat {
  fn: import { getStat } from "@server/queries.js",
  entities: [Stat]
}

query getNotification {
  fn: import { getNotification } from "@server/queries.js",
  entities: [Notification]
}

route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  component: import { Dashboard } from "@client/Dashboard.jsx",
  authRequired: true
}

route MatchRoute { path: "/match/:matchId", to: MatchPage }
page MatchPage {
  component: import { Match } from "@client/pages/Match.jsx",
  authRequired: true
}

route ChatRoute { path: "/chat/:userId", to: ChatPage }
page ChatPage {
  component: import { ChatPage } from "@client/pages/Chat.jsx",
  authRequired: true
}

route ProfileRoute { path: "/profile/:userId", to: ProfilePage }
page ProfilePage {
  component: import { ProfilePage } from "@client/pages/Profile.jsx",
  authRequired: true
}

route TaskRoute { path: "/task/:taskId", to: TaskPage }
page TaskPage {
  component: import { TaskPage } from "@client/pages/Task.jsx",
  authRequired: true
}
